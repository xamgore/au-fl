-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ./Parser.y
-----------------------------------------------------------------------------

state 17 contains 1 shift/reduce conflicts.

terminal read is unused
terminal write is unused
terminal '*' is unused
terminal '**' is unused
terminal '/' is unused
terminal '%' is unused
terminal '==' is unused
terminal '!=' is unused
terminal '>' is unused
terminal '>=' is unused
terminal '<' is unused
terminal '<=' is unused
terminal '&&' is unused
terminal '||' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Defs Stmts                              (1)
	Defs -> Defs Func                                  (2)
	Defs ->                                            (3)
	Func -> fun id '(' Args ')' Block                  (4)
	Args -> Arg                                        (5)
	Args -> Args ',' Arg                               (6)
	Args ->                                            (7)
	Arg -> id                                          (8)
	Arg -> id '=' Expr                                 (9)
	Block -> '{' Stmts '}'                             (10)
	Block -> Stmt                                      (11)
	Stmts -> Stmt                                      (12)
	Stmts -> Stmts ';' Stmt                            (13)
	Stmts ->                                           (14)
	Stmt -> Expr ';'                                   (15)
	Stmt -> if Expr Block else Block                   (16)
	Stmt -> while Expr do Block                        (17)
	Expr -> true                                       (18)
	Expr -> false                                      (19)
	Expr -> id                                         (20)
	Expr -> num                                        (21)
	Expr -> id '(' VArgs ')'                           (22)
	Expr -> '-' Expr                                   (23)
	Expr -> Expr '+' Expr                              (24)
	VArgs -> Expr                                      (25)
	VArgs -> VArgs ',' Expr                            (26)
	VArgs ->                                           (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { TLParen     _ _ _ }
	')'            { TRParen     _ _ _ }
	'{'            { TLBrace     _ _ _ }
	'}'            { TRBrace     _ _ _ }
	';'            { TSep        _ _ _ }
	','            { TComma      _ _ _ }
	do             { TDo         _ _ _ }
	while          { TWhile      _ _ _ }
	fun            { TFun        _ _ _ }
	if             { TIf         _ _ _ }
	else           { TElse       _ _ _ }
	read           { TRead       _ _ _ }
	write          { TWrite      _ _ _ }
	true           { TTrue       _ _ _ }
	false          { TFalse      _ _ _ }
	'='            { TAssign     _ _ _ }
	'+'            { TPlus       _ _ _ }
	'-'            { TMinus      _ _ _ }
	'*'            { TMult       _ _ _ }
	'**'           { TPower      _ _ _ }
	'/'            { TDiv        _ _ _ }
	'%'            { TMod        _ _ _ }
	'=='           { TEQ         _ _ _ }
	'!='           { TNEQ        _ _ _ }
	'>'            { TGT         _ _ _ }
	'>='           { TGE         _ _ _ }
	'<'            { TLT         _ _ _ }
	'<='           { TLE         _ _ _ }
	'&&'           { TAnd        _ _ _ }
	'||'           { TOr         _ _ _ }
	id             { TId  _      _ _ _ }
	num            { TNum _      _ _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Defs            rules 2, 3
	Func            rule  4
	Args            rules 5, 6, 7
	Arg             rules 8, 9
	Block           rules 10, 11
	Stmts           rules 12, 13, 14
	Stmt            rules 15, 16, 17
	Expr            rules 18, 19, 20, 21, 22, 23, 24
	VArgs           rules 25, 26, 27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	';'            reduce using rule 3
	while          reduce using rule 3
	fun            reduce using rule 3
	if             reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	'-'            reduce using rule 3
	id             reduce using rule 3
	num            reduce using rule 3
	%eof           reduce using rule 3

	Program        goto state 3
	Defs           goto state 2

State 1



	Defs           goto state 2

State 2

	Program -> Defs . Stmts                             (rule 1)
	Defs -> Defs . Func                                 (rule 2)

	';'            reduce using rule 14
	while          shift, and enter state 8
	fun            shift, and enter state 9
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15
	%eof           reduce using rule 14

	Func           goto state 4
	Stmts          goto state 5
	Stmt           goto state 6
	Expr           goto state 7

State 3

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 4

	Defs -> Defs Func .                                 (rule 2)

	';'            reduce using rule 2
	while          reduce using rule 2
	fun            reduce using rule 2
	if             reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	'-'            reduce using rule 2
	id             reduce using rule 2
	num            reduce using rule 2
	%eof           reduce using rule 2


State 5

	Program -> Defs Stmts .                             (rule 1)
	Stmts -> Stmts . ';' Stmt                           (rule 13)

	';'            shift, and enter state 23
	%eof           reduce using rule 1


State 6

	Stmts -> Stmt .                                     (rule 12)

	'}'            reduce using rule 12
	';'            reduce using rule 12
	%eof           reduce using rule 12


State 7

	Stmt -> Expr . ';'                                  (rule 15)
	Expr -> Expr . '+' Expr                             (rule 24)

	';'            shift, and enter state 21
	'+'            shift, and enter state 22


State 8

	Stmt -> while . Expr do Block                       (rule 17)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 20

State 9

	Func -> fun . id '(' Args ')' Block                 (rule 4)

	id             shift, and enter state 19


State 10

	Stmt -> if . Expr Block else Block                  (rule 16)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 18

State 11

	Expr -> true .                                      (rule 18)

	')'            reduce using rule 18
	'{'            reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	do             reduce using rule 18
	while          reduce using rule 18
	if             reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	id             reduce using rule 18
	num            reduce using rule 18


State 12

	Expr -> false .                                     (rule 19)

	')'            reduce using rule 19
	'{'            reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	do             reduce using rule 19
	while          reduce using rule 19
	if             reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	id             reduce using rule 19
	num            reduce using rule 19


State 13

	Expr -> '-' . Expr                                  (rule 23)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 17

State 14

	Expr -> id .                                        (rule 20)
	Expr -> id . '(' VArgs ')'                          (rule 22)

	'('            shift, and enter state 16
	')'            reduce using rule 20
	'{'            reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	do             reduce using rule 20
	while          reduce using rule 20
	if             reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	id             reduce using rule 20
	num            reduce using rule 20


State 15

	Expr -> num .                                       (rule 21)

	')'            reduce using rule 21
	'{'            reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	do             reduce using rule 21
	while          reduce using rule 21
	if             reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	id             reduce using rule 21
	num            reduce using rule 21


State 16

	Expr -> id '(' . VArgs ')'                          (rule 22)

	')'            reduce using rule 27
	','            reduce using rule 27
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 31
	VArgs          goto state 32

State 17

	Expr -> '-' Expr .                                  (rule 23)
	Expr -> Expr . '+' Expr                             (rule 24)

	')'            reduce using rule 23
	'{'            reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	do             reduce using rule 23
	while          reduce using rule 23
	if             reduce using rule 23
	true           reduce using rule 23
	false          reduce using rule 23
	'+'            shift, and enter state 22
			(reduce using rule 23)

	'-'            reduce using rule 23
	id             reduce using rule 23
	num            reduce using rule 23


State 18

	Stmt -> if Expr . Block else Block                  (rule 16)
	Expr -> Expr . '+' Expr                             (rule 24)

	'{'            shift, and enter state 30
	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'+'            shift, and enter state 22
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Block          goto state 28
	Stmt           goto state 29
	Expr           goto state 7

State 19

	Func -> fun id . '(' Args ')' Block                 (rule 4)

	'('            shift, and enter state 27


State 20

	Stmt -> while Expr . do Block                       (rule 17)
	Expr -> Expr . '+' Expr                             (rule 24)

	do             shift, and enter state 26
	'+'            shift, and enter state 22


State 21

	Stmt -> Expr ';' .                                  (rule 15)

	'}'            reduce using rule 15
	';'            reduce using rule 15
	while          reduce using rule 15
	fun            reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	'-'            reduce using rule 15
	id             reduce using rule 15
	num            reduce using rule 15
	%eof           reduce using rule 15


State 22

	Expr -> Expr '+' . Expr                             (rule 24)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 25

State 23

	Stmts -> Stmts ';' . Stmt                           (rule 13)

	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Stmt           goto state 24
	Expr           goto state 7

State 24

	Stmts -> Stmts ';' Stmt .                           (rule 13)

	'}'            reduce using rule 13
	';'            reduce using rule 13
	%eof           reduce using rule 13


State 25

	Expr -> Expr . '+' Expr                             (rule 24)
	Expr -> Expr '+' Expr .                             (rule 24)

	')'            reduce using rule 24
	'{'            reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	do             reduce using rule 24
	while          reduce using rule 24
	if             reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	id             reduce using rule 24
	num            reduce using rule 24


State 26

	Stmt -> while Expr do . Block                       (rule 17)

	'{'            shift, and enter state 30
	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Block          goto state 40
	Stmt           goto state 29
	Expr           goto state 7

State 27

	Func -> fun id '(' . Args ')' Block                 (rule 4)

	')'            reduce using rule 7
	','            reduce using rule 7
	id             shift, and enter state 39

	Args           goto state 37
	Arg            goto state 38

State 28

	Stmt -> if Expr Block . else Block                  (rule 16)

	else           shift, and enter state 36


State 29

	Block -> Stmt .                                     (rule 11)

	'}'            reduce using rule 11
	';'            reduce using rule 11
	while          reduce using rule 11
	fun            reduce using rule 11
	if             reduce using rule 11
	else           reduce using rule 11
	true           reduce using rule 11
	false          reduce using rule 11
	'-'            reduce using rule 11
	id             reduce using rule 11
	num            reduce using rule 11
	%eof           reduce using rule 11


State 30

	Block -> '{' . Stmts '}'                            (rule 10)

	'}'            reduce using rule 14
	';'            reduce using rule 14
	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Stmts          goto state 35
	Stmt           goto state 6
	Expr           goto state 7

State 31

	Expr -> Expr . '+' Expr                             (rule 24)
	VArgs -> Expr .                                     (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	'+'            shift, and enter state 22


State 32

	Expr -> id '(' VArgs . ')'                          (rule 22)
	VArgs -> VArgs . ',' Expr                           (rule 26)

	')'            shift, and enter state 33
	','            shift, and enter state 34


State 33

	Expr -> id '(' VArgs ')' .                          (rule 22)

	')'            reduce using rule 22
	'{'            reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	do             reduce using rule 22
	while          reduce using rule 22
	if             reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	id             reduce using rule 22
	num            reduce using rule 22


State 34

	VArgs -> VArgs ',' . Expr                           (rule 26)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 46

State 35

	Block -> '{' Stmts . '}'                            (rule 10)
	Stmts -> Stmts . ';' Stmt                           (rule 13)

	'}'            shift, and enter state 45
	';'            shift, and enter state 23


State 36

	Stmt -> if Expr Block else . Block                  (rule 16)

	'{'            shift, and enter state 30
	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Block          goto state 44
	Stmt           goto state 29
	Expr           goto state 7

State 37

	Func -> fun id '(' Args . ')' Block                 (rule 4)
	Args -> Args . ',' Arg                              (rule 6)

	')'            shift, and enter state 42
	','            shift, and enter state 43


State 38

	Args -> Arg .                                       (rule 5)

	')'            reduce using rule 5
	','            reduce using rule 5


State 39

	Arg -> id .                                         (rule 8)
	Arg -> id . '=' Expr                                (rule 9)

	')'            reduce using rule 8
	','            reduce using rule 8
	'='            shift, and enter state 41


State 40

	Stmt -> while Expr do Block .                       (rule 17)

	'}'            reduce using rule 17
	';'            reduce using rule 17
	while          reduce using rule 17
	fun            reduce using rule 17
	if             reduce using rule 17
	else           reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	'-'            reduce using rule 17
	id             reduce using rule 17
	num            reduce using rule 17
	%eof           reduce using rule 17


State 41

	Arg -> id '=' . Expr                                (rule 9)

	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Expr           goto state 49

State 42

	Func -> fun id '(' Args ')' . Block                 (rule 4)

	'{'            shift, and enter state 30
	while          shift, and enter state 8
	if             shift, and enter state 10
	true           shift, and enter state 11
	false          shift, and enter state 12
	'-'            shift, and enter state 13
	id             shift, and enter state 14
	num            shift, and enter state 15

	Block          goto state 48
	Stmt           goto state 29
	Expr           goto state 7

State 43

	Args -> Args ',' . Arg                              (rule 6)

	id             shift, and enter state 39

	Arg            goto state 47

State 44

	Stmt -> if Expr Block else Block .                  (rule 16)

	'}'            reduce using rule 16
	';'            reduce using rule 16
	while          reduce using rule 16
	fun            reduce using rule 16
	if             reduce using rule 16
	else           reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	'-'            reduce using rule 16
	id             reduce using rule 16
	num            reduce using rule 16
	%eof           reduce using rule 16


State 45

	Block -> '{' Stmts '}' .                            (rule 10)

	'}'            reduce using rule 10
	';'            reduce using rule 10
	while          reduce using rule 10
	fun            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	true           reduce using rule 10
	false          reduce using rule 10
	'-'            reduce using rule 10
	id             reduce using rule 10
	num            reduce using rule 10
	%eof           reduce using rule 10


State 46

	Expr -> Expr . '+' Expr                             (rule 24)
	VArgs -> VArgs ',' Expr .                           (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	'+'            shift, and enter state 22


State 47

	Args -> Args ',' Arg .                              (rule 6)

	')'            reduce using rule 6
	','            reduce using rule 6


State 48

	Func -> fun id '(' Args ')' Block .                 (rule 4)

	';'            reduce using rule 4
	while          reduce using rule 4
	fun            reduce using rule 4
	if             reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	'-'            reduce using rule 4
	id             reduce using rule 4
	num            reduce using rule 4
	%eof           reduce using rule 4


State 49

	Arg -> id '=' Expr .                                (rule 9)
	Expr -> Expr . '+' Expr                             (rule 24)

	')'            reduce using rule 9
	','            reduce using rule 9
	'+'            shift, and enter state 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 32
Number of non-terminals: 11
Number of states: 50
